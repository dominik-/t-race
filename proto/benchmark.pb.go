// Code generated by protoc-gen-go. DO NOT EDIT.
// source: benchmark.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	benchmark.proto

It has these top-level messages:
	WorkerConfiguration
	SpanModel
	Tag
	Result
	ResultPackage
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type CallType int32

const (
	CallType_SYNC  CallType = 0
	CallType_ASYNC CallType = 1
)

var CallType_name = map[int32]string{
	0: "SYNC",
	1: "ASYNC",
}
var CallType_value = map[string]int32{
	"SYNC":  0,
	"ASYNC": 1,
}

func (x CallType) String() string {
	return proto1.EnumName(CallType_name, int32(x))
}
func (CallType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type WorkerConfiguration struct {
	WorkerId         string       `protobuf:"bytes,1,opt,name=workerId" json:"workerId,omitempty"`
	RuntimeSeconds   int64        `protobuf:"varint,2,opt,name=runtimeSeconds" json:"runtimeSeconds,omitempty"`
	TargetThroughput int64        `protobuf:"varint,3,opt,name=targetThroughput" json:"targetThroughput,omitempty"`
	EnvironmentId    string       `protobuf:"bytes,4,opt,name=environmentId" json:"environmentId,omitempty"`
	SpanSequence     []*SpanModel `protobuf:"bytes,5,rep,name=spanSequence" json:"spanSequence,omitempty"`
}

func (m *WorkerConfiguration) Reset()                    { *m = WorkerConfiguration{} }
func (m *WorkerConfiguration) String() string            { return proto1.CompactTextString(m) }
func (*WorkerConfiguration) ProtoMessage()               {}
func (*WorkerConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WorkerConfiguration) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *WorkerConfiguration) GetRuntimeSeconds() int64 {
	if m != nil {
		return m.RuntimeSeconds
	}
	return 0
}

func (m *WorkerConfiguration) GetTargetThroughput() int64 {
	if m != nil {
		return m.TargetThroughput
	}
	return 0
}

func (m *WorkerConfiguration) GetEnvironmentId() string {
	if m != nil {
		return m.EnvironmentId
	}
	return ""
}

func (m *WorkerConfiguration) GetSpanSequence() []*SpanModel {
	if m != nil {
		return m.SpanSequence
	}
	return nil
}

type SpanModel struct {
	OperationName string   `protobuf:"bytes,1,opt,name=operationName" json:"operationName,omitempty"`
	CallType      CallType `protobuf:"varint,2,opt,name=callType,enum=proto.CallType" json:"callType,omitempty"`
	Delay         int64    `protobuf:"varint,3,opt,name=delay" json:"delay,omitempty"`
	Tags          []*Tag   `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
}

func (m *SpanModel) Reset()                    { *m = SpanModel{} }
func (m *SpanModel) String() string            { return proto1.CompactTextString(m) }
func (*SpanModel) ProtoMessage()               {}
func (*SpanModel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SpanModel) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

func (m *SpanModel) GetCallType() CallType {
	if m != nil {
		return m.CallType
	}
	return CallType_SYNC
}

func (m *SpanModel) GetDelay() int64 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *SpanModel) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Tag struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto1.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Tag) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Tag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Result struct {
	OperationName string `protobuf:"bytes,1,opt,name=operationName" json:"operationName,omitempty"`
	SpanId        int64  `protobuf:"varint,2,opt,name=spanId" json:"spanId,omitempty"`
	Latency       int64  `protobuf:"varint,3,opt,name=latency" json:"latency,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto1.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Result) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

func (m *Result) GetSpanId() int64 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

func (m *Result) GetLatency() int64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

type ResultPackage struct {
	WorkerId      string    `protobuf:"bytes,1,opt,name=workerId" json:"workerId,omitempty"`
	EnvironmentId string    `protobuf:"bytes,2,opt,name=environmentId" json:"environmentId,omitempty"`
	Results       []*Result `protobuf:"bytes,3,rep,name=results" json:"results,omitempty"`
}

func (m *ResultPackage) Reset()                    { *m = ResultPackage{} }
func (m *ResultPackage) String() string            { return proto1.CompactTextString(m) }
func (*ResultPackage) ProtoMessage()               {}
func (*ResultPackage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ResultPackage) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *ResultPackage) GetEnvironmentId() string {
	if m != nil {
		return m.EnvironmentId
	}
	return ""
}

func (m *ResultPackage) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto1.RegisterType((*WorkerConfiguration)(nil), "proto.WorkerConfiguration")
	proto1.RegisterType((*SpanModel)(nil), "proto.SpanModel")
	proto1.RegisterType((*Tag)(nil), "proto.Tag")
	proto1.RegisterType((*Result)(nil), "proto.Result")
	proto1.RegisterType((*ResultPackage)(nil), "proto.ResultPackage")
	proto1.RegisterEnum("proto.CallType", CallType_name, CallType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BenchmarkWorker service

type BenchmarkWorkerClient interface {
	StartWorker(ctx context.Context, in *WorkerConfiguration, opts ...grpc.CallOption) (BenchmarkWorker_StartWorkerClient, error)
}

type benchmarkWorkerClient struct {
	cc *grpc.ClientConn
}

func NewBenchmarkWorkerClient(cc *grpc.ClientConn) BenchmarkWorkerClient {
	return &benchmarkWorkerClient{cc}
}

func (c *benchmarkWorkerClient) StartWorker(ctx context.Context, in *WorkerConfiguration, opts ...grpc.CallOption) (BenchmarkWorker_StartWorkerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BenchmarkWorker_serviceDesc.Streams[0], c.cc, "/proto.BenchmarkWorker/StartWorker", opts...)
	if err != nil {
		return nil, err
	}
	x := &benchmarkWorkerStartWorkerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BenchmarkWorker_StartWorkerClient interface {
	Recv() (*ResultPackage, error)
	grpc.ClientStream
}

type benchmarkWorkerStartWorkerClient struct {
	grpc.ClientStream
}

func (x *benchmarkWorkerStartWorkerClient) Recv() (*ResultPackage, error) {
	m := new(ResultPackage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BenchmarkWorker service

type BenchmarkWorkerServer interface {
	StartWorker(*WorkerConfiguration, BenchmarkWorker_StartWorkerServer) error
}

func RegisterBenchmarkWorkerServer(s *grpc.Server, srv BenchmarkWorkerServer) {
	s.RegisterService(&_BenchmarkWorker_serviceDesc, srv)
}

func _BenchmarkWorker_StartWorker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkerConfiguration)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BenchmarkWorkerServer).StartWorker(m, &benchmarkWorkerStartWorkerServer{stream})
}

type BenchmarkWorker_StartWorkerServer interface {
	Send(*ResultPackage) error
	grpc.ServerStream
}

type benchmarkWorkerStartWorkerServer struct {
	grpc.ServerStream
}

func (x *benchmarkWorkerStartWorkerServer) Send(m *ResultPackage) error {
	return x.ServerStream.SendMsg(m)
}

var _BenchmarkWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BenchmarkWorker",
	HandlerType: (*BenchmarkWorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartWorker",
			Handler:       _BenchmarkWorker_StartWorker_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "benchmark.proto",
}

func init() { proto1.RegisterFile("benchmark.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0xeb, 0x24, 0x4d, 0xa6, 0xa4, 0x89, 0x96, 0x0a, 0xad, 0x72, 0x80, 0xc8, 0x42, 0x10,
	0x15, 0x51, 0xa1, 0xc0, 0x0f, 0x40, 0x4e, 0x39, 0x50, 0xa1, 0x75, 0x04, 0xe2, 0xc6, 0xd4, 0x1e,
	0x9c, 0x28, 0xce, 0xae, 0x59, 0xaf, 0x8b, 0xc2, 0x77, 0xf0, 0x83, 0xfc, 0x09, 0xf2, 0xee, 0x3a,
	0x92, 0x69, 0x84, 0x7a, 0xf2, 0xbe, 0x37, 0xe3, 0x79, 0xf3, 0x66, 0x06, 0x46, 0xb7, 0x24, 0x93,
	0xf5, 0x0e, 0xf5, 0xf6, 0xba, 0xd0, 0xca, 0x28, 0xd6, 0xb5, 0x9f, 0xe8, 0x4f, 0x00, 0x8f, 0xbf,
	0x28, 0xbd, 0x25, 0xbd, 0x50, 0xf2, 0xfb, 0x26, 0xab, 0x34, 0x9a, 0x8d, 0x92, 0x6c, 0x02, 0xfd,
	0x9f, 0x96, 0x5e, 0xa6, 0x3c, 0x98, 0x06, 0xb3, 0x81, 0x38, 0x60, 0xf6, 0x02, 0x2e, 0x74, 0x25,
	0xcd, 0x66, 0x47, 0x31, 0x25, 0x4a, 0xa6, 0x25, 0x3f, 0x9d, 0x06, 0xb3, 0x50, 0xfc, 0xc3, 0xb2,
	0x2b, 0x18, 0x1b, 0xd4, 0x19, 0x99, 0xd5, 0x5a, 0xab, 0x2a, 0x5b, 0x17, 0x95, 0xe1, 0xa1, 0xcd,
	0xbc, 0xc7, 0xb3, 0xe7, 0x30, 0x24, 0x79, 0xb7, 0xd1, 0x4a, 0xee, 0x48, 0x9a, 0x65, 0xca, 0x3b,
	0x56, 0xb4, 0x4d, 0xb2, 0x77, 0xf0, 0xa8, 0x2c, 0x50, 0xc6, 0xf4, 0xa3, 0x22, 0x99, 0x10, 0xef,
	0x4e, 0xc3, 0xd9, 0xf9, 0x7c, 0xec, 0x2c, 0x5d, 0xc7, 0x05, 0xca, 0x8f, 0x2a, 0xa5, 0x5c, 0xb4,
	0xb2, 0xa2, 0xdf, 0x01, 0x0c, 0x0e, 0xb1, 0x5a, 0x49, 0x15, 0xe4, 0x6c, 0xde, 0xe0, 0x8e, 0xbc,
	0xbd, 0x36, 0xc9, 0x5e, 0x41, 0x3f, 0xc1, 0x3c, 0x5f, 0xed, 0x0b, 0xb2, 0xee, 0x2e, 0xe6, 0x23,
	0xaf, 0xb2, 0xf0, 0xb4, 0x38, 0x24, 0xb0, 0x4b, 0xe8, 0xa6, 0x94, 0xe3, 0xde, 0xbb, 0x73, 0x80,
	0x3d, 0x85, 0x8e, 0xc1, 0xac, 0xe4, 0x1d, 0xdb, 0x24, 0xf8, 0xdf, 0x57, 0x98, 0x09, 0xcb, 0x47,
	0xaf, 0x21, 0x5c, 0x61, 0xc6, 0xc6, 0x10, 0x6e, 0x69, 0xef, 0xbb, 0xa8, 0x9f, 0x75, 0xb9, 0x3b,
	0xcc, 0x2b, 0x27, 0x3c, 0x10, 0x0e, 0x44, 0xdf, 0xa0, 0x27, 0xa8, 0xac, 0x72, 0xf3, 0x40, 0x07,
	0x4f, 0xa0, 0x57, 0x4f, 0x61, 0x99, 0xfa, 0xed, 0x78, 0xc4, 0x38, 0x9c, 0xe5, 0x68, 0x48, 0x26,
	0x4d, 0xbb, 0x0d, 0x8c, 0x7e, 0xc1, 0xd0, 0x29, 0x7c, 0xc2, 0x64, 0x8b, 0x19, 0xfd, 0xf7, 0x08,
	0xee, 0x2d, 0xec, 0xf4, 0xd8, 0xc2, 0x5e, 0xc2, 0x99, 0xb6, 0x25, 0x4b, 0x1e, 0xda, 0x31, 0x0c,
	0xfd, 0x18, 0x9c, 0x90, 0x68, 0xa2, 0x57, 0xcf, 0xa0, 0xdf, 0x0c, 0x96, 0xf5, 0xa1, 0x13, 0x7f,
	0xbd, 0x59, 0x8c, 0x4f, 0xd8, 0x00, 0xba, 0xef, 0xed, 0x33, 0x98, 0x7f, 0x86, 0xd1, 0x87, 0xe6,
	0x84, 0xdd, 0xc1, 0xb2, 0x05, 0x9c, 0xc7, 0x06, 0xb5, 0xf1, 0x70, 0xe2, 0x4b, 0x1f, 0x39, 0xe7,
	0xc9, 0x65, 0x4b, 0xd6, 0xfb, 0x8b, 0x4e, 0xde, 0x04, 0xb7, 0x3d, 0x1b, 0x78, 0xfb, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xe7, 0x48, 0xb0, 0x56, 0x21, 0x03, 0x00, 0x00,
}
