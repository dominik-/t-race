syntax = "proto3";
package api;

import "google/protobuf/timestamp.proto";

service BenchmarkWorker {
    rpc StartWorker(WorkerConfiguration) returns (stream ResultPackage) {}
    rpc Call(Empty) returns (Empty) {}
}

message WorkerConfiguration {
    string worker_id = 1;
    string operation_name = 2;
    //root indicates whether the worker is generating load directly and independently (root=true), or listens to requests (through the Call method).
    bool root = 3;
    int64 runtime_seconds = 4;
    int64 target_throughput = 5;
    //the sink is the backend address to send traces to, i.e. an endpoint of an opentracing-compatible tracer
    string sink_host_port = 6;
    ContextTemplate context = 7;
    //a final unit of local "work", also used if no subsequent calls are done by this worker
    Work work_final = 8;
    repeated Unit units = 9;
}

//Unit captures a request-response interaction with another emulated service.
message Unit {
    RelationshipType rel_type = 1;
    //This is sampled and waited for before the call is dispatched to the next worker listening at invoked_host_port.
    Work work_before = 2;
    string invoked_host_port = 3;
}

message Work {
    string dist_type = 1;
    map<string, double> parameters = 2;
}

message KeyValueTemplate {
    string key_static = 1;
	int64 key_length = 2;
	string value_static = 3;
	int64 value_length = 4;
}

message Result {
    bytes trace_id = 1;
    int64 trace_num = 2;
    bytes span_id = 3;
    int64 span_num = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp finish_time = 6;
    bool sampled = 7;
}

message ContextTemplate {
    repeated KeyValueTemplate tags = 1;
    repeated KeyValueTemplate baggage = 2;
}

message ResultPackage {
    string worker_id = 1;
    string environment_id = 2;
    repeated Result results = 3;
}

message Empty {
}

enum RelationshipType {
    CHILD = 0;
    FOLLOWING = 1;
}