syntax = "proto3";
option go_package = "api";

package api;

import "google/protobuf/timestamp.proto";

service BenchmarkWorker {
    rpc StartWorker(WorkerConfiguration) returns (stream ResultPackage) {}
    rpc Call(DispatchId) returns (Empty) {}
}

message WorkerConfiguration {
    string worker_id = 1;
    string service_name = 2;
    int64 runtime_seconds = 4;
    int64 target_throughput = 5;
    //the sink is the backend address to send traces to, i.e. an endpoint of an opentracing-compatible tracer
    string sink_host_port = 6;
    repeated Unit units = 9;
}

//Unit captures a request-response interaction with another emulated service.
message Unit {
    string identifier = 1;
    RelationshipType rel_type = 2;
    //This is sampled and waited for before the call is dispatched to the next worker listening at invoked_host_port.
    Work work_before = 3;
    ContextTemplate context = 5;
    repeated UnitRef inputs = 6;
    repeated UnitRef successors = 7;
    //this ration indicates how throughput of the service is distributed across units. If this is 0, then the unit is not a "root" unit and consequently not actively generating load.
    double throughputRatio = 8;
    bool sync = 9;
    bool isServer = 10;
}

message UnitRef {
    string serviceId = 1;
    string unitId = 2;
    bool sync = 3;
    bool isRemote = 4; //do we need this here? likely not, just look up the service by id from deployment?
    string host_port = 5; //do we need this here? likely not, just look up the service by id from deployment?
}

message Work {
    string dist_type = 1;
    map<string, double> parameters = 2;
}

message KeyValueTemplate {
    string key_static = 1;
	int64 key_length = 2;
	string value_static = 3;
	int64 value_length = 4;
}

message Result {
    bytes trace_id = 1;
    int64 trace_num = 2;
    bytes span_id = 3;
    int64 span_num = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp finish_time = 6;
    bool sampled = 7;
}

message ContextTemplate {
    repeated KeyValueTemplate tags = 1;
    repeated KeyValueTemplate logs = 2;
    repeated KeyValueTemplate baggage = 3;
}

message ResultPackage {
    string worker_id = 1;
    string environment_id = 2;
    repeated Result results = 3;
}

message DispatchId {
    string unitReference = 1;
}

message Empty {}

enum RelationshipType {
    CHILD = 0;
    FOLLOWS = 1;
	SERVER = 2;
	CLIENT = 3;
	PRODUCER = 4;
	CONSUMER = 5;
	INTERNAL = 6;
}