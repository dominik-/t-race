// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BenchmarkWorkerClient is the client API for BenchmarkWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchmarkWorkerClient interface {
	StartWorker(ctx context.Context, in *WorkerConfiguration, opts ...grpc.CallOption) (BenchmarkWorker_StartWorkerClient, error)
	Call(ctx context.Context, in *DispatchId, opts ...grpc.CallOption) (*Empty, error)
}

type benchmarkWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchmarkWorkerClient(cc grpc.ClientConnInterface) BenchmarkWorkerClient {
	return &benchmarkWorkerClient{cc}
}

func (c *benchmarkWorkerClient) StartWorker(ctx context.Context, in *WorkerConfiguration, opts ...grpc.CallOption) (BenchmarkWorker_StartWorkerClient, error) {
	stream, err := c.cc.NewStream(ctx, &BenchmarkWorker_ServiceDesc.Streams[0], "/api.BenchmarkWorker/StartWorker", opts...)
	if err != nil {
		return nil, err
	}
	x := &benchmarkWorkerStartWorkerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BenchmarkWorker_StartWorkerClient interface {
	Recv() (*ResultPackage, error)
	grpc.ClientStream
}

type benchmarkWorkerStartWorkerClient struct {
	grpc.ClientStream
}

func (x *benchmarkWorkerStartWorkerClient) Recv() (*ResultPackage, error) {
	m := new(ResultPackage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *benchmarkWorkerClient) Call(ctx context.Context, in *DispatchId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.BenchmarkWorker/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchmarkWorkerServer is the server API for BenchmarkWorker service.
// All implementations must embed UnimplementedBenchmarkWorkerServer
// for forward compatibility
type BenchmarkWorkerServer interface {
	StartWorker(*WorkerConfiguration, BenchmarkWorker_StartWorkerServer) error
	Call(context.Context, *DispatchId) (*Empty, error)
	mustEmbedUnimplementedBenchmarkWorkerServer()
}

// UnimplementedBenchmarkWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedBenchmarkWorkerServer struct {
}

func (UnimplementedBenchmarkWorkerServer) StartWorker(*WorkerConfiguration, BenchmarkWorker_StartWorkerServer) error {
	return status.Errorf(codes.Unimplemented, "method StartWorker not implemented")
}
func (UnimplementedBenchmarkWorkerServer) Call(context.Context, *DispatchId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedBenchmarkWorkerServer) mustEmbedUnimplementedBenchmarkWorkerServer() {}

// UnsafeBenchmarkWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchmarkWorkerServer will
// result in compilation errors.
type UnsafeBenchmarkWorkerServer interface {
	mustEmbedUnimplementedBenchmarkWorkerServer()
}

func RegisterBenchmarkWorkerServer(s grpc.ServiceRegistrar, srv BenchmarkWorkerServer) {
	s.RegisterService(&BenchmarkWorker_ServiceDesc, srv)
}

func _BenchmarkWorker_StartWorker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkerConfiguration)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BenchmarkWorkerServer).StartWorker(m, &benchmarkWorkerStartWorkerServer{stream})
}

type BenchmarkWorker_StartWorkerServer interface {
	Send(*ResultPackage) error
	grpc.ServerStream
}

type benchmarkWorkerStartWorkerServer struct {
	grpc.ServerStream
}

func (x *benchmarkWorkerStartWorkerServer) Send(m *ResultPackage) error {
	return x.ServerStream.SendMsg(m)
}

func _BenchmarkWorker_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkWorkerServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BenchmarkWorker/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkWorkerServer).Call(ctx, req.(*DispatchId))
	}
	return interceptor(ctx, in, info, handler)
}

// BenchmarkWorker_ServiceDesc is the grpc.ServiceDesc for BenchmarkWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BenchmarkWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BenchmarkWorker",
	HandlerType: (*BenchmarkWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _BenchmarkWorker_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartWorker",
			Handler:       _BenchmarkWorker_StartWorker_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/tracewriter.proto",
}
